{"version":3,"sources":["utils/helpers.ts","components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["getRandomName","value","Date","now","toString","slice","Clock","state","time","timerId","updateTime","setState","getTime","toUTCString","this","window","setInterval","prevProps","prevState","prevTime","currentTime","prevName","name","currentName","props","console","info","debug","clearInterval","className","Component","App","hasClock","clockName","handleLeftClick","handleRightClick","event","preventDefault","updateClockName","document","addEventListener","removeEventListener","PureComponent","ReactDOM","render","getElementById"],"mappings":"8LAAO,SAASA,IACd,IAAMC,EAAQC,KAAKC,MAAMC,WAAWC,OAAO,GAE3C,MAAM,SAAN,OAAgBJ,G,WCOLK,EAAb,4MACEC,MAAe,CACbC,KAAM,IAAIN,MAFd,EAKEO,QAAU,EALZ,EAgCEC,WAAa,WACX,EAAKC,SAAS,CAAEH,KAAM,IAAIN,QAjC9B,EAoCEU,QAAU,WACR,OAAO,EAAKL,MAAMC,KAAKK,cAAcR,OAAO,IAAK,IArCrD,uDAOE,WACES,KAAKL,QAAUM,OAAOC,YAAYF,KAAKJ,WAAY,OARvD,gCAWE,SAAmBO,EAAkBC,GACnC,IAAcC,EAAaD,EAAnBV,KACMY,EAAgBN,KAAKP,MAA3BC,KACMa,EAAaJ,EAAnBK,KACMC,EAAgBT,KAAKU,MAA3BF,KAEJF,IAAgBD,GAElBM,QAAQC,KAAKZ,KAAKF,WAGhBW,IAAgBF,GAElBI,QAAQE,MAAR,uBAA8BN,EAA9B,eAA6CE,MAxBnD,kCA4BE,WACER,OAAOa,cAAcd,KAAKL,WA7B9B,oBAwCE,WACE,IAAQa,EAASR,KAAKU,MAAdF,KACFd,EAAOM,KAAKF,UAElB,OACE,sBAAKiB,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGP,IAGF,YAED,sBAAMO,UAAU,cAAhB,SACGrB,WArDX,GAA2BsB,aCAdC,G,MAAb,4MACExB,MAAe,CACbyB,UAAU,EACVC,UAAW,WAHf,EAMExB,QAAU,EANZ,EAsBEyB,gBAAkB,WAChB,EAAKvB,SAAS,CAAEqB,UAAU,KAvB9B,EA0BEG,iBAAmB,SAACC,GAClBA,EAAMC,iBAEN,EAAK1B,SAAS,CAAEqB,UAAU,KA7B9B,EAgCEM,gBAAkB,WAChB,EAAK3B,SAAS,CAAEsB,UAAWjC,OAjC/B,uDAQE,WACEuC,SAASC,iBAAiB,QAAS1B,KAAKoB,iBACxCK,SAASC,iBAAiB,cAAe1B,KAAKqB,kBAE9CrB,KAAKL,QAAUM,OAAOC,YAAYF,KAAKwB,gBAAiB,QAZ5D,kCAeE,WACEC,SAASE,oBAAoB,QAAS3B,KAAKoB,iBAC3CK,SAASE,oBAAoB,cAAe3B,KAAKqB,kBAEjDpB,OAAOa,cAAcd,KAAKL,WAnB9B,oBAoCE,WACE,MAAgCK,KAAKP,MAA7ByB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,OACE,sBAAKJ,UAAU,MAAf,UACE,6CAECG,GAAY,cAAC,EAAD,CAAOV,KAAMW,WA3ClC,GAAyBS,kBCPzBC,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.8fc577d5.chunk.js","sourcesContent":["export function getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n","import { Component } from 'react';\n\ntype Props = {\n  name: string;\n};\n\ntype State = {\n  time: Date;\n};\n\nexport class Clock extends Component<Props, State> {\n  state: State = {\n    time: new Date(),\n  };\n\n  timerId = 0;\n\n  componentDidMount() {\n    this.timerId = window.setInterval(this.updateTime, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { time: prevTime } = prevState;\n    const { time: currentTime } = this.state;\n    const { name: prevName } = prevProps;\n    const { name: currentName } = this.props;\n\n    if (currentTime !== prevTime) {\n      // eslint-disable-next-line no-console\n      console.info(this.getTime());\n    }\n\n    if (currentName !== prevName) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevName} to ${currentName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.timerId);\n  }\n\n  updateTime = () => {\n    this.setState({ time: new Date() });\n  };\n\n  getTime = (): string => {\n    return this.state.time.toUTCString().slice(-12, -4);\n  };\n\n  render() {\n    const { name } = this.props;\n    const time = this.getTime();\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {name}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {time}\n        </span>\n      </div>\n    );\n  }\n}\n","import { PureComponent } from 'react';\nimport { getRandomName } from './utils/helpers';\nimport { Clock } from './components/Clock';\nimport './App.scss';\n\ntype State = {\n  hasClock: boolean;\n  clockName: string;\n};\n\nexport class App extends PureComponent<{}, State> {\n  state: State = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  timerId = 0;\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleLeftClick);\n    document.addEventListener('contextmenu', this.handleRightClick);\n\n    this.timerId = window.setInterval(this.updateClockName, 3300);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleLeftClick);\n    document.removeEventListener('contextmenu', this.handleRightClick);\n\n    window.clearInterval(this.timerId);\n  }\n\n  handleLeftClick = () => {\n    this.setState({ hasClock: true });\n  };\n\n  handleRightClick = (event: MouseEvent) => {\n    event.preventDefault();\n\n    this.setState({ hasClock: false });\n  };\n\n  updateClockName = () => {\n    this.setState({ clockName: getRandomName() });\n  };\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && <Clock name={clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}